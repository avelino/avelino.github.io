<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benchmark on Avelino</title>
    <link>https://avelino.run/tags/benchmark/</link>
    <description>Recent content in Benchmark on Avelino</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://avelino.run/tags/benchmark/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go vs Python more request per second</title>
      <link>https://avelino.run/go-vs-python-more-request-per-second/</link>
      <pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://avelino.run/go-vs-python-more-request-per-second/</guid>
      <description>I use python because it is a simple and powerful language, but never used by be excellence in performance (But for python web serves very well)! I know that benchmark based on &amp;ldquo;Hello World&amp;rdquo; does not want to say too much, but it&amp;rsquo;s interessanta we know what technology (framework) is more time to answer performance web support request.
There is a python framework named Falcon (Falcon follows the REST architectural style, meaning (among other things) that you think in terms of resources and state transitions, which map to HTTP verbs) which is extremely performance, even using asynchronous backup processing library (as gevent, is a coroutine-based Python networking library that uses greenlet to provide a high-level asynchronous API on top of the libev event loop).</description>
    </item>
    
    <item>
      <title>Golang, C and Python the benchmark time</title>
      <link>https://avelino.run/golang-c-and-python-the-benchmark-time/</link>
      <pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://avelino.run/golang-c-and-python-the-benchmark-time/</guid>
      <description>I was wondering how performant Golang is, so I decided to put together a little benchmarking example for myself.
The benchmark will be done in my personal computer:
Processor 3 GHz Intel Core i7 Memory 8 GB 1600 MHz DDR3 Software OS X 10.9.2 (13C64)  So I started with Python, which is what I know best and created the following simple script;
 The reason for the total output, was to have a check to ensure that I was getting the same results in each of the scripts.</description>
    </item>
    
  </channel>
</rss>
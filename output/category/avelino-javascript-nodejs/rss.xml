<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thiago Avelino</title><link href="/" rel="alternate"></link><link href="/category/avelino-javascript-nodejs/rss.xml" rel="self"></link><id>/</id><updated>2012-07-27T11:40:00+02:00</updated><entry><title>Console colorido usando Node.js</title><link href="/2012/07/27/console-colorido-usando-node-js" rel="alternate"></link><updated>2012-07-27T11:40:00+02:00</updated><author><name>avelino</name></author><id>tag:,2012-07-27:2012/07/27/console-colorido-usando-node-js</id><summary type="html">&lt;p&gt;Para quem esta acostumado trabalhar com make para subir um ambiente ou o
pessoal que gosta de escrever alguns shell scripts para automação de
simples rotinas acho muito importante colocar cor nos retornos do
script, isso é ótimo para sinalizar o que realmente o software (ou
script) esta fazendo.&lt;/p&gt;
&lt;p&gt;Para deixar um retorno colorido usando Node.js não é muito diferente de
shell script, pois o que vai processar o retorno é um console bash (zsh
ou qual quer outro shell), veja o exemplo abaixo de como deixar um
retorno de shell script colorido:&lt;/p&gt;
&lt;p&gt;[gist id=3188137]&lt;/p&gt;
&lt;p&gt;[&lt;img alt="" src="http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.30.08-AM-300x300.png" title="Screen Shot 2012-07-27 at 11.30.08 AM" /&gt;][]&lt;/p&gt;
&lt;p&gt;Bom como comentei acima em Node.js não é muito diferente, seja exemplo
abaixo:&lt;/p&gt;
&lt;p&gt;[gist id=3188205]&lt;/p&gt;
&lt;p&gt;[&lt;img alt="" src="http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.31.42-AM-300x225.png" title="Screen Shot 2012-07-27 at 11.31.42 AM" /&gt;][]&lt;/p&gt;
&lt;p&gt;Perceba que no começo do script estamos usando o "&lt;strong&gt;&lt;code&gt;'use strict';&lt;/code&gt;&lt;/strong&gt;",
para não termos problema com o formato loco de color dentro das strings.
No exemplo que estamos usando variáveis coloquei as colors em Unicode
(eis ai uma problema!).&lt;/p&gt;
&lt;h3&gt;Porque uso "&lt;strong&gt;\u&lt;/strong&gt;" nos códigos unicode?&lt;/h3&gt;
&lt;p&gt;Bom realmente eu não entendi muito bem o porque o Node.js trata dessa
forma, mas achei uma essa explicação:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Octal literals can be identified by a numeric value starting with a
leading 0 (zero). Since this is a source of a possible unintentional
octal values when the programmer zero-pads decimal numbers of varying
lengths in the source code to make then look prettier and more
uniform. The strict mode disallows the octal mode due to this reason.&lt;br /&gt;
 The ESCape code can be represented in a number of ways. Decimal 27 ,
Hexadecimal 1B , Octal 33 or Binary 00011011.&lt;br /&gt;
 So instead of write the ESC code in a string as \033 you can as well
just choose one of the other modes. Hexadecimal for instance: \x1B.&lt;br /&gt;
 In your example you used the two-byte unicode representation of the
character \u001b which works just as well.&lt;br /&gt;
 I’m still an oldschool C head and usually assumes all strings to be
plain ASCII so I’d use \x1B by default instead of this newfangled
unicode crap Java is using. \^_\^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Realmente não é muito produtivo desenvolver dessa forma, mas temos
algumas iniciativas open source que pode nos ajudar com o retorno de
cores dentro do Node.js.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/medikoo/cli-color"&gt;cli-color&lt;/a&gt; - &lt;a href="https://github.com/medikoo"&gt;Mariusz Nowak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mattpat/colorize"&gt;colorize&lt;/a&gt; - &lt;a href="http://mattpatenaude.com/"&gt;Matt Patenaude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TrevorBurnham/sty"&gt;sty&lt;/a&gt; - &lt;a href="https://github.com/TrevorBurnham"&gt;Trevor Burnham&lt;/a&gt; (&lt;em&gt;Esse projeto aceita você coloca
    objetos html como marcação&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todos os projetos acima estão dentro do npm.&lt;/p&gt;
&lt;p&gt;[&lt;img alt="" src="http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.30.08-AM-300x300.png" title="Screen Shot 2012-07-27 at 11.30.08 AM" /&gt;]: http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.30.08-AM.png
  [&lt;img alt="" src="http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.31.42-AM-300x225.png" title="Screen Shot 2012-07-27 at 11.31.42 AM" /&gt;]: http://avelino.us/wp-content/uploads/2012/07/Screen-Shot-2012-07-27-at-11.31.42-AM.png&lt;/p&gt;</summary></entry><entry><title>Criando package (modulo) em Node.js</title><link href="/2012/06/23/criando-package-modulo-em-node-js" rel="alternate"></link><updated>2012-06-23T10:15:00+02:00</updated><author><name>avelino</name></author><id>tag:,2012-06-23:2012/06/23/criando-package-modulo-em-node-js</id><summary type="html">&lt;p&gt;Existe muitas pessoas querendo estudar Node.js pela simplicidade de
trabalhar com processamento assíncrono e por usar JavaScript em server
side. JavaScript é uma linguagem simples mas para desenvolvimento Client
side mas ao mesmo tempo quando colocamos JavaScript do lado do servidor
começa a surgi algumas duvidas como: estrutura do software, como criar
biblioteca, qual Framework usar e muitas outras.&lt;/p&gt;
&lt;p&gt;Dando uma olhada no Github vi que tem muitos software que parece uma
lingüiça com mais de 500 linhas em um mesmo arquivo, aí me vem a
seguinte pergunta "JavaScript não é orientado a objeto?" logicamente que
sim, então tem alguma coisa errada pois uns dos paradigma é dividir
funcionabilidade onde cada modulo faça sua parte e usando todas faz o
que foi proposto a ser feito.&lt;/p&gt;
&lt;p&gt;Então vamos lá, seguindo um exemplo simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conectar em um banco de dados&lt;/li&gt;
&lt;li&gt;Fazer insert, update e delete&lt;/li&gt;
&lt;li&gt;Desconectar do banco de dados&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O exemplo usado encontra-se no repositorio "&lt;a href="https://github.com/avelino/example-nodejs-mongodb" title="Example NodeJS MongoDB"&gt;example-nodejs-mongodb&lt;/a&gt;"
na minha conta do Github, nesse exemplo vou usar o banco de dados
&lt;a href="http://www.mongodb.org/" title="MongoDB"&gt;MongoDB&lt;/a&gt; por ser mais simples de instalar e usar (Pois é um banco de
dados NoSQL) . Dado que já esteja instalado o MongoDB em seu sistema
operacional (Para usuarios Linux basta baixar o source do MongoDB no
site e depois rodar o binario mongod, já para usuarios Windows não tenho
não tenho experiencia no ambiente mas achei esse &lt;a href="http://www.nosqlbr.com.br/instalando-mongodb-no-windows-com-wamp.html" title="Como Instalar MongoDB no Windows com Wamp"&gt;tutorial&lt;/a&gt; que pode
ajudar). A instalação do NodeJS e NPM no &lt;a href="http://vinteum.com/instalando-nodejs-no-ubuntu/" title="Instalando NodeJS no Ubuntu Linux"&gt;Linux&lt;/a&gt; e &lt;a href="http://mateussouzaweb.com/blog/nodejs/tutorial-instalando-nodejs-no-windows" title="Tutorial – Instalando NodeJS no Windows"&gt;Windows&lt;/a&gt; é uma
operação relativamente simples, por isso não vou detalhar todo o
processo, você pode ver nos artigos nesse blogpost.&lt;/p&gt;
&lt;p&gt;A primeira coisa que temos que ter em mente é que tudo o que é escrito
dentro de um package (proprio) não é levado para fora, você precisa
especificar o que realmente quer expor do seu package. No arquivo
&lt;strong&gt;&lt;a href="https://github.com/avelino/example-nodejs-mongodb/blob/master/mongocon.js"&gt;mongocon.js&lt;/a&gt;&lt;/strong&gt; temos um exemplo de como trabalhar com exports no
Node.JS:&lt;/p&gt;
&lt;div&gt;
        var mongoose = require('mongoose');
        mongoose.connect('mongodb://localhost/avelinous');

        exports.mongoose = mongoose;

&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
No exemplo acima estou expondo toda a classe do **mongoose**, eu poderia
restringir export só alguns metodos por exemplo:

&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
        var mongoose = require('mongoose');
        mongoose.connect('mongodb://localhost/avelinous');

        exports.mongoose_schema = mongoose.Schema;

&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
Assim podemos limitar o acesso dentro de um package.

&lt;/div&gt;

&lt;div&gt;
Caso queira fazer um package e expor publicamente via NPM, basta criar
um package.json juntamente com o seu source, assim pode colocar
dependencias que o seu package tem e em qual versão do NodeJS ele roda,
veja o exemplo de um package.json:

&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongo_test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A package using mongoose ODM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Thiago Avelino &amp;lt;thiagoavelinoster AT gmail DOT com&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;mongoose&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;gt;= 2.7.0&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;engine&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;node 0.6.19&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;/div&gt;

&lt;div&gt;
Pronto, com isso é facil enviar o seu package para o repositorio do NPM.

&lt;/div&gt;</summary></entry></feed>